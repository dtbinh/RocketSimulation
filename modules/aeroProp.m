%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Aero & Propulsion
%
% Find forces and moments on the body in the body frame.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Reset aero force on body (will be using a running total to add forces)
faB = zeros(3,1);
mB = zeros(3,1);

% Get updated density
[~,~,~, rho] = atmosisa(-sblL(3));

% Get dynamic pressure in the body frame using vwlL, vblB, Tbl. Need to
% find the velocity of the body with respect to the wind in local level
% coordinates. Equation development:
%
% Establish geometry:
% sbw = sbl + slw
%     = sbl - swl
% Take the derivative in the local level frame, Dl():
% Dl(sbw) = Dl(sbl) - Dl(swl)
%         = vbl - vwl
% Apply local level coordinates:
% vbwL = vblL - vwlL
%      = Tbl'*vblB - vwlL
vbwL = Tbl'*vblB - vwlL;
vwbL = -vbwL;

% Dynamic pressure
qbar = 0.5 * rho * norm(vwbL);

% Angle of attack of the body
vwbB = Tbl * vwbL;
alfa = atan2(vwbB(3),vwbB(1));

% Lift and drag on the body %%TODO
bodyLift = 0;
bodyDrag = 0;

% Aerodynamic force on body
faB = [-bodyDrag;0;-bodyLift];

% Skew symmetric matrix of angular velocity of the rocket
WblB = [0           -wblB(3)    wblB(2)     ;...
        wblB(3)     0           -wblB(1)    ;...
        -wblB(2)    wblB(1)     0           ];

% Consider the contribution of each fin using thin aerofoil theory
for finAngle = finAngles
    % Already exists: Tbl, vwlL, vblB, wblB

    % Rotation matrix from fin to body coordinates
    Tfb = rotx(finAngle);

    % Position of the fin with respect to the rocket center of mass
    sfbB = [-l r*cos(finAngle) r*sin(finAngle)]';

    % Velocity of the wind with respect to the fin in fin coordinates
    vwfF = Tfb*Tbl*vwlL-Tfb*vblB-Tfb*(WblB*sfbB);

    % Want the velocity of the fin wrt the wind for alfa calculation
    vfwF = -vwfF;
    
    % Angle of attack seen by the fin
    alfa = atan2(vfwF(3),vfwF(1));

    % Lift and drag generated by fins
    qbar = 0.5 * rho * norm(vwfF);
    finLift = qbar * S * 2 * pi * alfa;
    finDrag = 0;

    % Aerodynamic force on the fin in fin coordinates.
    faF = [-finDrag; 0; -finLift];

    % Write forces and moments in the body frame. Recall faB = Tbf*faF:
    faB = faB + Tfb' * faF;
    mB = mB + cross(sfbB, faB);
end

% Force from propusion when the motor is active
if sim_t < 4
    % Motor on
    fpB = [500; 0; 0];
else
    % Motor off
    fpB = [0; 0; 0];
end

% Log data from this module
sim_data.faB(:, sim_ndx) = faB;
sim_data.fpB(:, sim_ndx) = fpB;
sim_data.mB(:, sim_ndx) = mB;

% Total force from aerodynamics and propulsion
fB = fpB + faB;
%mB = [0;0;0];
